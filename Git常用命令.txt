git 常用命令

一 、仓库创建：
 1. mkdir XXX————创建XXX文件夹/创建文件
	cd XXX 进入到XXX文件夹
 2. pwd	————用于显示当前文件夹中文件目录
 3. git init————把当前目录变成Git可以管理的仓库(即创建工作区, 和工具区中的版本库.git文件)， 把暂存区的所有内容提交到当前分支
	工作区: innit 命令执行时所在文件夹, 
	版本库: 工作区中的.git文件,  
	暂存区: 版本库中的stage 或index文件, 
	分支:	版本库中master 或head 等

二 、提交：
 4. git add XXX————把XXX文件添加到仓库(暂存区)， 把文件修改添加到暂存区， 每次修改，如果不add到暂存区，那就不会被commit加入到分支中
 5. git commit -m "xxx"	————把文件提交到当前分支, -m后面输入的是本次提交的说明, 
	为什么Git添加文件需要add，commit一共两步呢？
	add: 是将文件提交到暂存区;
	commit: 是将暂存区的所有文件提交到当前分支;
	所以可以多次add打暂存区, 然后一次性commit到当前分支;

三 、状态信息查看：
 6. git status————查看仓库(工作区)当前的状态(是否有未提交的更改等)
 7. git diff XXX————查看（比较）XXX文件修改的内容(查看对应文件做了什么修改)

四 、版本控制：
 8. git log --pretty=oneline————显示从最近到最远的提交日志，--pretty=oneline  一行显示
 9. git reset --hard HEAD^————用HEAD表示当前版本（最新版本）， 上一个版本就是HEAD^， 上上一个版本就是HEAD^^， 往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
10. git reset --hard 3628164 ————回到指定的某个版本， 3628164 指commit id， 版本号， git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
11. git reflog————记录git操作的每一次命令
12. git checkout -- readme.txt————意思就是，把readme.txt文件在工作区的修改全部撤销，git checkout -- file 即用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
		用版本库里的版本替换工作区的版本 分两种情况:
			一种是从分支上替换工作区的版本， 修改后的文件未放到暂存区， 例如readme.txt自修改后还没有被放到暂存区，此时，撤销修改就回到和版本库一模一样的状态， 让文件回到最近一次git commit时的状态。
			一种是从暂存区替换工作区的版本， 修改后的文件已经添加到暂存区， 例如readme.txt已经添加到暂存区后，又作了修改，此时，撤销修改就回到添加到暂存区后的状态， 让文件回到最近一次git add时的状态。
		命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
		
13. 版本恢复的几种情况：
	场景1：想丢弃工作区的修改，在工作区对文件进行修改，但未执行add操作，执行命令git checkout -- file。

	场景2：想丢弃暂存区的修改，在工作区对文件进行修改，并且执行add操作，但未执行commit操作，将文件添加到了暂存区，此时分两步————
				第一步用git reset HEAD file命令，将提交到暂存区的文件退回到工作区；
				第二步按场景1操作。

	场景3：想丢弃分支上的修改，已经执行commit操作，但未执行push操作，提交了不合适的修改到版本库（分支）时，想要撤销本次提交，参考版本号回退一节，不过前提是没有推送到远程库。
	
14. 删除文件：
	情形1、工作区中的文件，在未提交到版本库（暂存区和分支）时，文件信息未记录到版本库，可在工作区直接删除，这种删除往往是不能通过git恢复的
	情形2、暂存区中的文件，在执行add操作后， 将文件提交到版本库的暂存区中，
