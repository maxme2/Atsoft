git 常用命令

一 、仓库创建：
  1. mkdir XXX————创建XXX文件夹/创建文件
		cd XXX 进入到XXX文件夹
  2. pwd	————用于显示当前文件夹中文件目录
  3. git init————把当前目录变成Git可以管理的仓库(即创建工作区, 和工具区中的版本库.git文件)， 把暂存区的所有内容提交到当前分支
		工作区: innit 命令执行时所在文件夹, 
		版本库: 工作区中的.git文件,  
		暂存区: 版本库中的stage 或index文件, 
		分支:	版本库中master 或head 等

二 、提交：
  4. git add XXX————把XXX文件添加到仓库(暂存区)， 把文件修改添加到暂存区， 每次修改，如果不add到暂存区，那就不会被commit加入到分支中
  5. git commit -m "xxx"	————把文件提交到当前分支, -m后面输入的是本次提交的说明, 
		为什么Git添加文件需要add，commit一共两步呢？
		add: 是将文件提交到暂存区;
		commit: 是将暂存区的所有文件提交到当前分支;
		所以可以多次add打暂存区, 然后一次性commit到当前分支;

三 、状态信息查看：
  6. git status————查看仓库(工作区)当前的状态(是否有未提交的更改等)
  7. git diff XXX————查看（比较）XXX文件修改的内容(查看对应文件做了什么修改)

四 、版本控制：
  8. git log --pretty=oneline————显示从最近到最远的提交日志，--pretty=oneline  一行显示， git log --graph命令可以看到分支合并图
  9. git reset --hard HEAD^————用HEAD表示当前版本（最新版本）， 上一个版本就是HEAD^， 上上一个版本就是HEAD^^， 往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
 10. git reset --hard 3628164 ————回到指定的某个版本， 3628164 指commit id， 版本号， git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
 11. git reflog————记录git操作的每一次命令
 12. git checkout -- readme.txt————意思就是，把readme.txt文件在工作区的修改全部撤销，git checkout -- file 即用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
		用版本库里的版本替换工作区的版本 分两种情况:
			一种是从分支上替换工作区的版本， 修改后的文件未放到暂存区， 例如readme.txt自修改后还没有被放到暂存区，此时，撤销修改就回到和版本库一模一样的状态， 让文件回到最近一次git commit时的状态。
			一种是从暂存区替换工作区的版本， 修改后的文件已经添加到暂存区， 例如readme.txt已经添加到暂存区后，又作了修改，此时，撤销修改就回到添加到暂存区后的状态， 让文件回到最近一次git add时的状态。
		命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
		
 13. 版本恢复的几种情况：
		场景1：想丢弃工作区的修改，在工作区对文件进行修改，但未执行add操作，执行命令git checkout -- file。

		场景2：想丢弃暂存区的修改，在工作区对文件进行修改，并且执行add操作，但未执行commit操作，将文件添加到了暂存区，此时分两步————
				第一步用git reset HEAD file命令，将提交到暂存区的文件退回到工作区；
				第二步按场景1操作。

		场景3：想丢弃分支上的修改，已经执行commit操作，但未执行push操作，提交了不合适的修改到版本库（分支）时，想要撤销本次提交，参考版本号回退一节，不过前提是没有推送到远程库。
	
 14. 删除文件：
		情形一  工作区中的文件，在未提交到版本库（暂存区和分支）时，文件信息未记录到版本库，不会导致工作区和版本库中的文件不一致，可在工作区直接删除，这种删除往往是不能通过git恢复的（因为版本库没有该文件的记录）
		情形二  暂存区或分支中（即版本库中）的文件，文件信息已经记录到版本库，在文件管理器中把没用的文件删了，或者用rm命令删了，
			这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了，
			此时git会出提示，一是确认删除该文件执行git rm file 并git commit -m 至此文件从版本库中删除；二是删错了，此时库里还有文件的记录，所以可以执行$ git checkout -- file轻松地把误删的文件恢复到最新版本			

五、远程仓库:
  15. 要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库
  16. 关联后，使用命令git push -u origin master第一次推送master分支的所有内容，实际上是把当前分支master推送到远程
		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
  17. 从远程仓库克隆内容到本地
		一 ssh 协议下git clone git@github.com:michaelliao/gitskills.git
		二 https 协议下git clone https://github.com/michaelliao/gitskills.git
		
六、分支：
  18. 创建XXX分支并切换到XXX分支
		方式一  git checkout -b XXX
		方式二  先创建分支 git branch XXX  接着切换到已创建的分支 git checkout XXX
  19. 查看当前分支情况
		git branch 		该命令会列出所有分支，当前分支前面会标一个*号。
		比如有两个分支, branch1 和branch2 commit到branch1上的内容在branch2上是看不到的， 同理，主分支master上也是看不到其它分支的内容的
  20. 分支合并
		git merge命令用于合并指定分支到当前分支
		不同分支间可以合并
		比如有两个分支, branch1 和branch2 要将branch2分支合并到branch1分支，应先git checkout branch1 切换到branch1 分支， 在执行git merge branch2 此时即将branch2合并到branch1了
 		分支的内容合并到master分支上， 同上， 切换到分支master， 再执行合并命令
  21. 删除分支
		git branch -d <name>
		比如有两个分支, branch1 和branch2 若前分支为branch1 branch1中可执行git branch -d branch2, 但是不能在branch1中执行git branch -d branch1;若当前分支为branch2同理, 自己不能删除自己
  22. 分支合并冲突的解决
		分支a和分支b对工作区的统一个文件进行操作后，提交到各自的分支上， 在合并分支时会产生冲突，此时需要找到冲突文件， 进行手动更改后再次提交方可解决冲突
  23. 查看分支合并图
		git log --graph命令可以看到分支合并图
		

